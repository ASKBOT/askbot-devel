"""Copies some events from Activity to analytics.Event"""
# Generated by Django 4.2.4 on 2024-04-20 23:55
# pylint: disable=missing-docstring, invalid-name
from django.db import migrations
from django.utils.translation import gettext_lazy as _
from askbot.utils.console import ProgressBar

EVENT_TYPES = (
    (1, _('registered')), # Activity.activity_type == 51
    (4, _('question viewed')), # Activity.activity_type == 52
    (6, _('upvoted')), # Activity.activity_type == 9
    (7, _('downvoted')), # Activity.activity_type == 10
    (9, _('asked')), # Activity.activity_type == 1
    (10, _('answered')), # Activity.activity_type == 2
    (11, _('commented question')), # Activity.activity_type == 3
    (12, _('commented answer')), # Activity.activity_type == 4
    (13, _('retagged question')), # Activity.activity_type == 15
)

def delete_analytics_objects(apps, schema_editor): #pylint: disable=missing-docstring, unused-argument
    """Deletes all Session and Event objects"""
    Event = apps.get_model('askbot', 'Event')
    Event.objects.all().delete()
    Session = apps.get_model('askbot', 'Session')
    Session.objects.all().delete()


def create_session(user_id, timestamp, apps): #pylint: disable=missing-docstring
    """Creates a session for the given user and timestamp"""
    Session = apps.get_model('askbot', 'Session')
    return Session.objects.create(user_id=user_id, created_at=timestamp, updated_at=timestamp)


def populate_user_registered_events(apps): #pylint: disable=missing-docstring
    User = apps.get_model('auth', 'User')
    Event = apps.get_model('askbot', 'Event')
    ContentType = apps.get_model('contenttypes', 'ContentType')
    content_type = ContentType.objects.get_for_model(User)

    users = User.objects.all().only('pk', 'date_joined')
    count = users.count()
    print('')
    message = 'Populating user registered events'
    for user in ProgressBar(users.iterator(), count, message):
        timestamp = user.date_joined
        session = create_session(user.pk, timestamp, apps)
        Event.objects.create(
            session=session,
            event_type=1,
            timestamp=user.date_joined,
            content_type=content_type,
            object_id=user.pk
        )


def populate_question_viewed_events(apps): #pylint: disable=missing-docstring
    QuestionView = apps.get_model('askbot', 'QuestionView')
    Event = apps.get_model('askbot', 'Event')
    Post = apps.get_model('askbot', 'Post')
    ContentType = apps.get_model('contenttypes', 'ContentType')
    content_type = ContentType.objects.get_for_model(Post)

    views = QuestionView.objects.all().only('when', 'who_id', 'question_id')
    count = views.count()
    print('')
    message = 'Population Question View events'
    for view in ProgressBar(views.iterator(), count, message):
        timestamp = view.when
        session = create_session(view.who_id, timestamp, apps)
        Event.objects.create(
            session=session,
            event_type=4,
            timestamp = timestamp,
            content_type=content_type,
            object_id=view.question_id
        )


def populate_voted_events(apps, activity_type=None, event_type=None, message=None): #pylint: disable=missing-docstring
    Activity = apps.get_model('askbot', 'Activity')
    Event = apps.get_model('askbot', 'Event')
    Post = apps.get_model('askbot', 'Post')
    Vote = apps.get_model('askbot', 'Vote')
    ContentType = apps.get_model('contenttypes', 'ContentType')
    content_type = ContentType.objects.get_for_model(Post)

    activity_fields = ('active_at', 'user_id', 'object_id', 'content_type')
    acts = Activity.objects.filter(activity_type=activity_type).only(*activity_fields)
    count = acts.count()
    for act in ProgressBar(acts.iterator(), count, message):
        session = create_session(act.user_id, act.active_at, apps)

        if act.content_type.model != 'vote':
            continue

        vote = Vote.objects.filter(pk=act.object_id).only('voted_post_id')

        if not vote.exists():
            continue

        post_id = vote[0].voted_post_id

        Event.objects.create(
            session=session,
            event_type=event_type,
            timestamp=act.active_at,
            content_type=content_type,
            object_id=post_id
        )



def populate_analytics_events(apps, schema_editor): #pylint: disable=unused-argument, missing-docstring
    populate_user_registered_events(apps)
    populate_question_viewed_events(apps)
    populate_voted_events(apps, activity_type=9, event_type=6, message='Populating upvoted events')
    populate_downvoted_events(apps, activity_type=10, event_type=7, message='Populating downvoted events')
    #populate_asked_events(apps)
    #populate_commented_question_events(apps)
    #populate_commented_answer_events(apps)
    #populate_retagged_question_events(apps)


class Migration(migrations.Migration):

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('askbot', '0026_alter_activity_activity_type_and_more'),
    ]

    operations = [
        migrations.RunPython(populate_analytics_events, reverse_code=delete_analytics_objects),
    ]
